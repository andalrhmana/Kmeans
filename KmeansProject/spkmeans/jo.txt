public Dictionary<string, string> AssignVmsToHosts(IEnumerable<VmInformation> vmsList)
{
    if(vmsList == null)
    {
        throw new ArgumentNullException(nameof(vmsList));
    }
    Dictionary<string, string> result = CalculateTargetHosts(vmsList);

    ApplySuggstedHostToHost(vmsList, result);

    return result;
}

private void ApplySuggstedHostToHost(IEnumerable<VmInformation> vmsList, Dictionary<string, string> result)
{
    foreach(var vmToHostAssgiment in result)
    {
        var vmInfo = vmsList.First(x => x.VmId == vmToHostAssgiment.Key);
        hostMap[vmToHostAssgiment.Value].AssignVmToHost(vmInfo);       // change 1, We can shorten the code with this line         
    }
}

/*
 * here i did change the code to let the test run with no fail.
 * I did add a dictionary hostswithadditons that will will told us if theres a place 
 * to add another vm into the host after (we imagin that we add them so we can see if theres 
 * place in the memory or cpu to this vm)
 * we add all the vms before this vm that we saw we 
 * can add them.
 */
private Dictionary<string, string> CalculateTargetHosts(IEnumerable<VmInformation> vmsList)
{
    var result = new Dictionary<string, string>();
    var hostswithvmadditons = new Dictionary<string, Tuple<int, int>>();

    foreach (var vm in vmsList)
    {
        foreach (var host in hostMap.Values)
        {
            if (!hostswithvmadditons.ContainsKey(host.HostId))
            {
                if (host.FreeMemoryInMb > vm.MemoryInMb && host.FreeCpuInMhz > vm.CpuInMhz)
                {
                    result.Add(vm.VmId, host.HostId);
                    hostswithvmadditons.Add(host.HostId, Tuple.Create(host.FreeMemoryInMb - vm.MemoryInMb, host.FreeCpuInMhz - vm.CpuInMhz));
                    break;
                }
            }
            else
            {
                var diff = hostswithvmadditons[host.HostId];
                if (diff.Item1 > vm.MemoryInMb && diff.Item2 > vm.CpuInMhz)
                {
                    result.Add(vm.VmId, host.HostId);
                    hostswithvmadditons[host.HostId] = Tuple.Create(host.FreeMemoryInMb - vm.MemoryInMb, host.FreeCpuInMhz - vm.CpuInMhz);
                    break;
                }
            }
        }
    }

    return result;
}